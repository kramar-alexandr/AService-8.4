remote procedure ActDClassOnOpenWindowRemote(var record ActVc,string,var Integer,var array string,var array LongInt);
external function Integer CountObjects(string);
remote procedure ActVcRecordDefServer(var record ActVc);

global
procedure ActVcRecordDefClient(var record ActVc Actr)
begin
  record CRMBlock CRMb;
  
  BlockLoad(CRMb);
  if (CRMb.ActTimeFromClient!=0) then begin
    Actr.TransDate = CurrentDate;
    if (Actr.TodoFlag!=kTodoFlagRecurring and (Actr.TodoFlag!=kTodoFlagProject or Actr.TodoFlag!=kTodoFlagCleanTask or Actr.TodoFlag!=kTodoFlagRoomMaintenance)) then begin
      Actr.EndDate = CurrentDate;
      Actr.StartTime = CurrentTime;
    end;
  end else begin
    ActVcRecordDefServer(Actr);
  end;
  if (blank(Actr.MainPersons)) then begin
    //Actr.MainPersons = CurrentUser;// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 17 November 2017 17:54:03
  end;
  //Actr.CCPersons = CurrentUser;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 16 November 2017 15:38:48
	Actr.AlarmType = 1;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 22 November 2017 17:47:27
  return;
end;

global
function LongInt ActVcRecordDefaultsClient(LongInt wn,var record ActVc Actr,record ActVc Act2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  ActVcRecordDefClient(Actr);
  if (GetWindowClass(wn)=="ProjActDClass") then begin
    Actr.TodoFlag = kTodoFlagProject;
  end;
  if (GetWindowClass(wn)=="RecActDClass") then begin
    Actr.TodoFlag = kTodoFlagRecurring;
  end;
  Actr.Supervisor = CurrentUser;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 21 March 2018 16:27:12
  ActVcRecordDefaultsClient = res; 
  return;
end;

global
function LongInt ActVcRecordUpdateClient(LongInt wn,var record ActVc Actr,record ActVc Act2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record RcVc RepSpec;
  Integer nwn;
  
  switch (Actr.NextApproversType) begin
    case kNextApproversTypeNextLevel:
      if (nonblank(Actr.NextApprovers)) then begin
        RepSpec.f11 = Actr.NextFYIPersons;
        RepSpec.f12 = Actr.NextApprovers;
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        RepSpec.UsedOnly = 1;
        RepSpec.ArtMode = kNextApproversTypeNextLevel;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      end;
    case kNextApproversTypeForward:
      if (nonblank(Actr.NextApprovers)) then begin
        RepSpec.f11 = Actr.NextFYIPersons;
        RepSpec.f12 = Actr.NextApprovers;
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        RepSpec.UsedOnly = 1;
        RepSpec.ArtMode = kNextApproversTypeForward;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      end;
  end;
/*  this code has no effect, moved to ProjActDClassOnOKWindow
  if (Act2r.OKFlag==0) then begin
    switch (Actr.TodoFlag) begin
      case kTodoFlagProject:
        if (Actr.EndDate==Act2r.EndDate) then begin//when no manual amendmends
          Actr.EndDate = CurrentDate;
        end;
        if (Actr.EndTime==Act2r.EndTime) then begin//when no manual amendmends
          Actr.EndTime = CurrentTime;
        end;
    end;
  end;
*/  
  UpdateBrowses("ToDoWClass");
  UpdateBrowses("PipelineWClass");
  UpdateBrowses("WorkflowWClass");
  UpdateBrowses("MonthWClass");
//  UpdateBrowses("ActVc");

//  UpdateWorkflowOverview(FindWindow("PipelineWClass"),BuildRecordIdStr(Actr,CurrentCompany));
  ActVcRecordUpdateClient = res; 
  return;
end;

global
function LongInt ActVcRecordSaveClient(LongInt wn,var record ActVc Actr,record ActVc Act2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  UpdateBrowses("ToDoWClass");
  UpdateBrowses("PipelineWClass");
  UpdateBrowses("WorkflowWClass");
  UpdateBrowses("MonthWClass");
  ActVcRecordSaveClient = res; 
  return;
end;

global
updating function LongInt ActVcRecordRemoveClient(LongInt wn,var record ActVc Actr,record ActVc Act2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  UpdateBrowses("ToDoWClass");
  UpdateBrowses("PipelineWClass");
  UpdateBrowses("WorkflowWClass");
  UpdateBrowses("MonthWClass");
  ActVcRecordRemoveClient = res;
  RETURN;
END;

global
function LongInt ActVcRecordDuplicateClient(LongInt wn,var record ActVc Actr,record ActVc Act2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 255 filename;
  Integer AcceptanceStatusFlag;
  array string 255 aspas;
  array LongInt aactnr;

  filename = "ActVc";
  if (Actr.TodoFlag==kTodoFlagProject) then begin
    filename = "ProjActVc";
  end;
  if (Actr.TodoFlag==kTodoFlagCleanTask) then begin
    filename = "CleanActVc";
  end;
  if (Actr.TodoFlag==kTodoFlagRoomMaintenance) then begin
    filename = "MaintActVc";
  end;
  ActDClassOnOpenWindowRemote(Actr,filename,AcceptanceStatusFlag,aspas,aactnr);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  ReRunWindowDef(wn);
  ActVcRecordDuplicateClient = res;
  return;
end;

global
function LongInt ActVcRecordProtectFields(var record ActVc Actr,record ActVc Act2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  Act2r.NextApprovers = Actr.NextApprovers;
  Act2r.NextFYIPersons = Actr.NextFYIPersons;
  ActVcRecordProtectFields = res;
  return;
end;
