SetLangMode(LangRussian,"RUS",0);

global
updating function LongInt SVOCashUpVcRecordCheck(var record SVOCashUpVc SVOCr,record SVOCashUpVc SVOC2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
	
	
	if (SVOCr.SerNr==-1) then begin
    SVOCr.SerNr = NextSerNr("SVOCashUpVc",currentdate,-1,false,"");
  end;
  if(blank(SVOCr.SalesMan))then begin
  	res = -1;
  	RecordCheckError(1058,"",-1,"SalesMan");  
  	goto LSVOCashUpVcRecordCheck;
  end;
  if(blank(SVOCr.SalesGroup))then begin
  	res = -1;
  	RecordCheckError(1058,"",-1,"SalesGroup");  
  	goto LSVOCashUpVcRecordCheck;
  end;
  /*if(blank(SVOCr.RecieveMan) and SVOCr.OKFlag==1)then begin
  	res = -1;
  	RecordCheckError(1058,"",-1,"RecieveMan");  
  	goto LSVOCashUpVcRecordCheck;
  end;*/
	
  res = 0;
LSVOCashUpVcRecordCheck:;  

  SVOCashUpVcRecordCheck = res;
  RETURN;
END;

global
function LongInt SVOCashUpVcRecordDefaults(var record SVOCashUpVc SVOCr,record SVOCashUpVc SVOC2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
	record SVOCashUpVc oldSVOCr;
	row SVOCashUpVc SVOCrw;
	record UserVc USr;
	date lastdate;
	time lasttime;
	record SVOVc SVOr;
	boolean testf,TrHs;
	val cashsum,termsum,banksum;
	record IVVc IVr;
	record IPrsVc IPrsr;
	record IPVc IPr;
	row IPVc IPrw;
	record CLInVc CLInr;
	row CLInVc CLInrw;
	record CLOutVc CLOutr;
	row CLOutVc CLOUtrw;
	integer i,mtrw;
	val ivcash,ivterm,ivbank;
	
	
	SVOCr.SalesMan = CurrentUser;
	USr.Code = currentuser;
	readfirstmain(USr,1,true);
	SVOCr.SalesGroup = USr.SalesGroup;
  SVOCr.TransDate = currentdate;
  SVOCr.TransTime = currenttime;
	
	oldSVOCr.SalesGroup = SVOCr.SalesGroup;
	oldSVOCr.SerNr = 99999999;
	if(readlastkey("SalesGroup",oldSVOCr,2,false))then begin
		if(oldSVOCr.SalesGroup==SVOCr.SalesGroup)then begin
			lastdate = oldSVOCr.TransDate;
			lasttime = oldSVOCr.TransTime;
			SVOr.RegDate = lastdate;
			while(loopkey("RegDate",SVOr,1,true))begin
				testf = true;
				if(SVOr.RegDate==oldSVOCr.TransDate and SVOr.OutTime<lasttime)then begin testf = false; end;
				if(SVOr.RegDate<oldSVOCr.TransDate)then begin testf = false; end;
				if(SVOr.SalesGroup!=oldSVOCr.SalesGroup)then begin testf = false; end;
			
				if(testf)then begin
					if(SVOr.FastCash!=0 or SVOr.FastTerm!=0 or SVOr.FastBank!=0 or SVOr.WSCost!=0)then begin
						cashsum = cashsum + SVOr.FastCash;
						termsum = termsum + SVOr.FastTerm;
						banksum = banksum + SVOr.FastBank;
						ClearRow(SVOCr,SVOCrw,1);
						SVOCrw.SVONr = SVOr.SerNr;
						SVOCrw.CashSum = SVOr.FastCash;
						SVOCrw.TermSum = SVOr.FastTerm;
						SVOCrw.BankSum = SVOr.FastBank;
						SVOCrw.RowDate = SVOr.RegDate;
						SVOCrw.RowTime = SVOr.OutTime;
						SVOCrw.Sign = SVOr.CustomField7;
						matrowput(SVOCr,matrowcnt(SVOCr),SVOCrw);
						SVOCr.SVOQty = SVOCr.SVOQty + 1;
					end;
				end;
			end;
		
			resetloop(oldSVOCr);
			resetloop(SVOr);
			SVOr.RegDate = addday(lastdate,-30);
			while(loopkey("TransDate",SVOr,1,true))begin
				testf = true;
				if(SVOr.TransDate==oldSVOCr.TransDate and SVOr.RegTime<lasttime)then begin testf = false; end;
				if(SVOr.TransDate<oldSVOCr.TransDate)then begin testf = false; end;
				if(SVOr.SalesGroup!=oldSVOCr.SalesGroup)then begin testf = false; end;
			
				if(testf)then begin
					if(SVOr.FastTermPrepay!=0 or SVOr.FastPrepay!=0)then begin
					
						if(SVOr.FastTermPrepay!=0)then begin 
							if(SVOr.FastTermPrepayDate<lastdate)then begin testf = false; end;
							if(SVOr.FastTermPrepayDate==lastdate and SVOr.FastTermPrepayTime<lasttime)then begin testf = false; end;
						end;
						if(SVOr.FastPrepay!=0)then begin 
							if(SVOr.FastPrepayDate<lastdate)then begin testf = false; end;
							if(SVOr.FastPrepayDate==lastdate and SVOr.FastPrepayTime<lasttime)then begin testf = false; end;
						end;
					
						if(testf)then begin
							cashsum = cashsum + SVOr.FastPrepay;
							termsum = termsum + SVOr.FastTermPrepay;
							ClearRow(SVOCr,SVOCrw,1);
							SVOCrw.SVONr = SVOr.SerNr;
							SVOCrw.CashSum = SVOr.FastPrepay;
							SVOCrw.TermSum = SVOr.FastTermPrepay;
							SVOCrw.RowDate = SVOr.RegDate;
							SVOCrw.RowTime = SVOr.OutTime;
							SVOCrw.Sign = SVOr.CustomField7;
							matrowput(SVOCr,matrowcnt(SVOCr),SVOCrw);
							SVOCr.SVOQty = SVOCr.SVOQty + 1;
						end;
					end;
				end;
			end;
		
			IVr.InvDate = lastdate;
			while(loopkey("InvDate",IVr,1,true))begin
				testf = true;
				if(IVr.InvDate==oldSVOCr.TransDate and IVr.TransTime<lasttime)then begin testf = false; end;
				if(IVr.OKFlag==0)then begin testf = false; end;
				if(IVr.Invalid==1)then begin testf = false; end;
				if(IVr.SalesGroup!=oldSVOCr.SalesGroup)then begin testf = false; end;
				if(IVr.SVONr>0)then begin testf = false; end;
						
				if(testf)then begin
					resetloop(IPrsr);
					IPrsr.IVNr = IVr.SerNr;
					TrHs = true;
					ivcash = blankval;
					ivterm = blankval;
					ivbank = blankval;
				
					ivcash = IVr.FastCash;
					ivterm = IVr.FastTerm;
								
					if(ivcash!=0 or ivterm!=0 or ivbank!=0)then begin
						SVOCr.IVQty = SVOCr.IVQty + 1;
						ClearRow(SVOCr,SVOCrw,1);
						SVOCrw.IVNr = IVr.SerNr;
						SVOCrw.CashSum = ivcash;
						SVOCrw.TermSum = ivterm;
						SVOCrw.BankSum = ivbank;
						SVOCrw.RowDate = IVr.InvDate;
						SVOCrw.RowTime = IVr.RegTime;
						SVOCrw.Sign = IVr.SalesMan;
						matrowput(SVOCr,matrowcnt(SVOCr),SVOCrw);
					end;
				
				end;
			end;
		
			SVOCr.CashSum = cashsum;
			SVOCr.TermSum = termsum;
			SVOCr.BankSum = banksum;
  	end;
  end;
  
  SVOCashUpVcRecordDefaults = res; 
  RETURN;
END;


global
function LongInt SVOCashUpVcRecordRemoveTest(var record SVOCashUpVc SVOCr,record SVOCashUpVc SVOC2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLb;

  res = 1;
  
  if(SVOCr.OKFlag==1)then begin
  	//res = 0;
  end;
  
  
LSVOCashUpVcRecordRemoveTest:;
  SVOCashUpVcRecordRemoveTest = res;
  RETURN;
END;

global
function Boolean SVOCashUpDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record SVOCashUpVc SVOCr;
  
  res = true;

  getwindowrecord(wn,SVOCr);
  if(SVOCr.OKFlag==1)then begin
  	res = false;
  end;

  SVOCashUpDClassActiveEditField = res;
  return;
end;

global
function Boolean SVOCashUpDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record SVOCashUpVc SVOCr;
	
  res = true;
  GetWindowRecord(wn,SVOCr);
  
  if(SVOCr.OKFlag==1)then begin
  	res = false;
  end;
  
  SVOCashUpDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean ManagerFastPaySVOWClassAccSpecButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record RcVc RepSpec;
		
  res = true;
  deselectwindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  
  if(value==2)then begin
  	RepSpec.vals1 = round((RepSpec.vals0 * 1.05),defaultcurroundoff);
  end else begin
  	RepSpec.vals1 = blankval;
  end;
  putwindowrecord(wn,RepSpec);
  selectwindow(wn);
  ManagerFastPaySVOWClassAccSpecButtonAction = res;
  return;
end;

global procedure SVOCashUpRn(record RcVc RepSpec)
begin
	record SVOCashUpVc SVOCr;
	row SVOCashUpVc SVOCrw;
	record UserVc USr;
	integer i,mtrw;
	
	SVOCr.SerNr = RepSpec.long1;
	if(readfirstmain(SVOCr,1,true))then begin
		StartReportNoheaderJob("Выдача денег");
			startformat(15);
				OutString(0,0,"#",false);
				OutString(100,0,SVOCr.SerNr,false);
			endformat;
			startformat(15);
				OutString(0,0,"Дата",false);
				OutString(100,0,SVOCr.TransDate,false);
			endformat;
			startformat(15);
				OutString(0,0,"Время",false);
				OutString(100,0,SVOCr.TransTime,false);
			endformat;
			USr.Code = SVOCr.SalesMan;
			readfirstmain(USr,1,true);
			startformat(15);
				OutString(0,0,"Кассир",false);
				OutString(100,0,USr.Name,false);
			endformat;
			USr.Code = SVOCr.RecieveMan;
			readfirstmain(USr,1,true);
			startformat(15);
				OutString(0,0,"Принял",false);
				OutString(100,0,USr.Name,false);
			endformat;
			startformat(15);
				OutString(0,0,"Ремонтов",false);
				OutString(100,0,SVOCr.SVOQty,false);
			endformat;
			startformat(15);
				OutString(0,0,"Продаж",false);
				OutString(100,0,SVOCr.IVQty,false);
			endformat;
			startformat(15);
				OutString(0,0,"Наличные",false);
				OutString(100,0,SVOCr.CashSum,false);
			endformat;
			startformat(15);
				OutString(0,0,"Терминал",false);
				OutString(100,0,SVOCr.TermSum,false);
			endformat;
			startformat(15);
				OutString(0,0,"Банк",false);
				OutString(100,0,SVOCr.BankSum,false);
			endformat;
			
			Black_Divider(0,1);
			
			startformat(15);
				OutString(0,0,"# Ремонта",false);
				OutString(70,0,"# Акта",false);
				OutString(140,0,"Нал",false);
				OutString(210,0,"Терминал",false);
				OutString(280,0,"Банк",false);
				OutString(350,0,"Итого",false);
			endformat;
			
			mtrw = matrowcnt(SVOCr);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(SVOCr,i,SVOCrw);
	  		startformat(15);
	  			if(SVOCrw.SVONr>0)then begin
						OutString(0,0,SVOCrw.SVONr,false);
					end else begin
						OutString(0,0,"",false);
					end;
					if(SVOCrw.IVNr>0)then begin
						OutString(70,0,SVOCrw.IVNr,false);
					end else begin
						OutString(70,0,"",false);
					end;
					OutString(140,0,SVOCrw.CashSum,false);
					OutString(210,0,SVOCrw.TermSum,false);
					OutString(280,0,SVOCrw.BankSum,false);
					OutString(350,0,SVOCrw.CashSum + SVOCrw.TermSum + SVOCrw.BankSum,false);
				endformat;
			end; 
			
		endjob;
	end;

return;
end;

Global procedure DblSVOCashSign()
begin
	integer wn;
	record SVOCashUpVc SVOCr;
	record RcVc RepSpec;
	
	wn = curwindow;
	if(windowstate(wn)==0)then begin
		getwindowrecord(wn,SVOCr);
		if(SVOCr.OKFlag==0)then begin
			SVOCr.SalesMan = CurrentUser;
			PutWindowRecord(wn,SVOCr);
		end else begin
			messagebox(0,"Запись должна быть не заокеена");
		end;
	end else begin
		messagebox(0,"Сохраните изменения в окне");
	end;

return;
end;

Global procedure DblSVOCashSignRec()
begin
	integer wn;
	record SVOCashUpVc SVOCr;
	record RcVc RepSpec;
	
	wn = curwindow;
	if(windowstate(wn)==0)then begin
		getwindowrecord(wn,SVOCr);
		if(SVOCr.OKFlag==0)then begin
			SVOCr.RecieveMan = CurrentUser;
			PutWindowRecord(wn,SVOCr);
		end else begin
			messagebox(0,"Запись должна быть не заокеена");
		end;
	end else begin
		messagebox(0,"Сохраните изменения в окне");
	end;

return;
end;

global procedure DblSVOCashUpRn()
begin
	integer wn;
	record SVOCashUpVc SVOCr;
	record RcVc RepSpec;
	
	wn = curwindow;
	if(windowstate(wn)==0)then begin
		getwindowrecord(wn,SVOCr);
		if(SVOCr.OKFlag==1)then begin
			ReportDefaults(RepSpec,"SVOCashUpRClass");
			RepSpec.Media = mtScreen;
			RepSpec.JobDf = 1;
			RepSpec.long1 = SVOCr.SerNr;
			RepSpec.repname = "SVOCashUpRn";
			RunReport(RepSpec,0);
		end else begin
			messagebox(0,"Запись должна быть заокеена");
		end;
	end else begin
		messagebox(0,"Сохраните изменения в окне");
	end;
	
return;
end;