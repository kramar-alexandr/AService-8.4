global function integer EmailValidationStatusWithStdID()
begin		
	EmailValidationStatusWithStdID = 2;
end;

global
procedure InternalInitTXIdleTasks()
begin
  return;
end;

global
updating procedure SendValidationEmail(record EmailValidationVc EVr)
begin
  return;
end;

global
function string 255 SamplePriceListFromCurrency(string cuntrycode)
begin
  SamplePriceListFromCurrency = "";
  return;
end;

global
procedure ShowSubscriptionsPossibleInLine_SubINPackages(string type,record WebNGStructVc WSr,record CUVc CUr)
begin
  return;
end;

global
procedure ShowActiveSubscriptionsViewSubsINPackages(string type,record WebNGStructVc WSr,record CUVc CUr)
begin
  return;
end;

global
updating function Integer RedeemIntStdActivCode(string uuids,string custcode)
begin 
  return;
end;

global
procedure ShowSubscriptionsShoppingBasket(record WebNGStructVc WSr,record CUVc CUr)
begin
  return;
end;

global
updating function Boolean DoSubscriptionTransMn(var record RcVc RepSpec)
begin
end;

global
updating function Boolean CreateSubscriptionsFromShoppingBasket2(string paymethod,string langcode,var Date payuntil,var LongInt subnr,var LongInt perlen)
begin
end;

global
updating function Boolean CreateSubscriptionsFromShoppingBasket(string paymethod,string langcode)
begin
end;

global
procedure WebSubscriptionPriceList()
begin
end;

global
updating procedure DoUpdateSubscriptionFromSubINPackages(Longint achange,string subinpackcode,LongInt extendsubsnr,record CUVc CUr)
begin
end;

global
procedure ShowWebWatchpointIssue()
begin
end;

global
procedure ShowWebWatchpointList()
begin
end;

global
procedure CheckTimedUserLogAction()
begin
end;

global
procedure SubscriptionsApp(record WebNGStructVc WSr,string path)
begin
end;

global
updating procedure ShopRedeemIntStdActivCode2(string paysessionid,string activationcode,string activationcodecustname)
begin
end;

global
updating procedure ShopRedeemIntStdActivCode(string paysessionid,string activationcode)
begin
end;

global
updating procedure SubscribeWithCard2(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear,
                                          string street,string city,string state,string postalcode,string countrycode,string email,string phone,string successlink,string sourcepath)
begin
end;

global
updating procedure SubscribeWithCard(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear,
                                          string street,string city,string state,string postalcode,string countrycode,string email,string phone)
begin
end;

global
procedure PasteCustInSubscription(var record SubscriptionVc Sr)
begin
end;

global
procedure PasteSubItemInSubscription(var record SubscriptionVc Sr)
begin
end;

global
procedure MkplSetCurrentCustomerCompany(string custcode)
begin
end;

global
procedure StdIdAccessList(string email,string servicename,var array record StdIdAccessVc SIAarr)
begin
end;

global
procedure MyServerApp2(record WebNGStructVc WSr,string mpath)
begin
return;
end;

global
procedure ShowMyServerAdminMenu(record WebNGElementVc WEr)
begin
return;
end;

global
procedure LaunchHost(record HostingConfigurationVc HCr,record RcVc RepSpec,Integer hptype)
begin
end;

global
function string 255 HansaVersionLClassVersionColumn(var record HansaVersionVc HVr)
begin

  HansaVersionLClassVersionColumn = "";
  return;
end;

global
updating procedure CreateNode(string node_name,record HostingConfigurationVc HCr,Integer hptype,Integer max_capacity,string classification,var record CloudNodeVc CNr)
begin
end;

global
procedure DoFileListReload(uuid ident)
begin
end;

global
function Integer TerminateHost(record CloudNodeVc CNr,Boolean alldisksf,Boolean forcef,Boolean bgf,var string astring)
begin
  astring = "";
  TerminateHost = 0;
  return;
end;

global
function Boolean TestServerNotResponding(string server_ip,LongInt server_port)
begin
  TestServerNotResponding = false;
  return;
end;

global
updating procedure CreateStdIDSystemLoginRecord(record HWIDUserVc HWIDUserr,string service,UUID sessionUUID,UUID userUUID,string ServerDBID,string ClientDBID,string email,string usercode,Integer regincountry,Integer LiveFlag,Integer DemoFlag,string product_identifier,Integer vatlaw,Integer paidstat,Integer os,string ipaddr)
begin
  return;
end;

global
procedure StdIdAccessList_ServerAll(uuid serverid,var array record StdIdAccessVc SIAarr)
begin
  return;
end;


global
procedure StdIdAccessList2(string email,Integer servicetype,var array record StdIdAccessVc SIAarr,Boolean mystandardf)
begin
  return;
end;

global
procedure StdIdAccessListAll(string email,var array record StdIdAccessVc SIAarr,var string language,Boolean mystandardf)
begin
  return;
end;

global
procedure OpenServerSessionForFileDownload(string email,string fn,string filepath,var uuid fusess,var LongInt fustat)
begin
  return;
end;

global
procedure GetCountryFromExternalIP(var string country,var string externalip)
begin
end;

global
procedure RegisterDownloadDataSession(UUID tuuid,vector string vData,Boolean updatef)
begin

  return;
end;

global
function string 255 GetDownloadsServerAddress()
begin

  return;
end;

global
procedure UpdateCustomerOnCC(record CUVc CUr,record CUVc CU2r,Boolean insertf)
begin
  return;
end;

global
updating procedure ClearMyStandardSessions()
begin
  return;
end;

global
function Boolean IsTestBuildVersion(string vercode)
begin
  IsTestBuildVersion = false;
  return;
end;

global
procedure PrintMarketplaceSubscriptions(record CUVc CUr)
begin
  return;
end;

global
procedure PrintMarketplaceSubscriptions2(record CUVc CUr,integer subcnt)
begin
  return;
end;

global
function Boolean IsASPVersion()
begin
  IsASPVersion = false;
  return;
end;

global
procedure ShowSingleMPItem(record WebNGElementVc WEr)
begin
  return;
end;

global
procedure ShowIBMLoginWindow()
begin
  return;
end;

global
updating procedure CallService_ConfirmSupplierEInvoiceReceived(LongInt nr)
begin
  return;
end;

global
procedure CloudGetAutomatedSales(string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string functiontag,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesOnLogin(string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesConfirmation(string progvers,string verbld,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,string functiontag,string subnr,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSales2(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string functiontag,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSales3(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string functiontag,string functiontrigger,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesOnLogin2(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesConfirmation2(string bldprodcode,string progvers,string verbld,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,string functiontag,string subnr,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesConfirmation3(string bldprodcode,string progvers,string verbld,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,string functiontag,string functiontrigger,string subnr,var Area rslta)
begin
  return;
end;

global
function Boolean WebUploadFileToArea(var string filename,var area rfilearea)
begin

  WebUploadFileToArea = false;
  return;
end;

global
function string 255 LetVcDoReplaceTokenResetPassword(record RCVc RepSpec,string field)
begin
  LetVcDoReplaceTokenResetPassword  = "";
  return;
end;
global
function string 255 LetVcDoReplaceTokenNCBannerVc(record RCVc RepSpec,string field)
begin
  LetVcDoReplaceTokenNCBannerVc  = "";
  return;
end;

global
function Boolean GetiTunesPackageId(string lang,string prod,var string appid)
begin
  GetiTunesPackageId = false;
  return;
end;

global
updating procedure ResetPasswordByMail(string email,var Integer result)
begin
  return;
end;

global
procedure CloudGetExpiringLicenses(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string user,string standardid,string langcode,var Area result)
begin
  return;
end;

global
procedure GetPartnerCompAccessList(var array Integer comparr,var array string partnerarr,string partner)
begin
return;
end;

global
procedure GetViewContractCompanyList(var array Integer comparr,var Boolean allf,string stdid)
begin
return;
end;
global
procedure GetBookkeeperCompanyList(var array Integer comparr,var Boolean allf,string stdid)
begin
return;
end;

global
procedure GetPartnerCustomerList(Integer compno,string partnercode,var array string aCustList)
begin
return;
end;

global
updating procedure CreateLoginSessionToken(UUID session,string email,UUID serverid,Integer company,string custcode,Longint contract,string partner,var UUID token)
begin

  return;
end;

global
procedure GetPartnerDetails(Longint partner,var string partnerno,var string partnername,var string partnercustcode,var string partnercompno)
begin

  return;
end;

global
updating procedure UpdateWebAppRelease(Integer release)
begin
  return;
end;

global
function Integer GetWebAppReleaseType(record WebAvailableApp2Vc WAAr)
begin

  GetWebAppReleaseType = -1;
  return;
end;

global
procedure GetDownloadsServer(var string url,var string key)
begin
  return;
end;

global
procedure StartRemoteFileDownload(UUID serverid,string email,string addr,string key,string filepath,string filename)
begin

  return;
end;

global
updating procedure SubscribeWithCard3(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                      string expirymonth,string expiryyear,
                                      string street,string city,string state,string postalcode,string countrycode,string email,string phone,string successlink,string sourcepath,
                                      string subscribetosubinpackage)
begin

  return;
end;

global
procedure HansaWorldRegisterApp(record WebNGStructVc WSr,string mpath)
begin
  return;
end;

global
procedure ArabMarketplaceMirroring()
begin
  return;
end;

global
procedure MigrationRegisterApp(record WebNGStructVc WSr,string path)
begin
  return;
end;

global
function Boolean ReadUserKey(var LongInt pos,var string username,var string key)
begin
  ReadUserKey = false;
  return;
end;

global
procedure StandardIDChangePassword()
begin

  return;
end;

global
procedure InviteFriendForm()
begin
return;
end;

global
procedure GetDownloadSessionData(string tuuid,var vector string vData)
begin
  return;
end;

global
procedure HTSFinStdIDCustomerLinks(string a,var array string b)
begin
  return;
end;

global
procedure HTSFinStdIDCustomerSubscriptions(string a,var array string b)
begin
  return;
end;

global
updating procedure StoreCURegInvoiceMonthsForm()
begin
  return;
end;

global
procedure SetMyStandardUserAccess(UUID serverid,string email,string custcode,Boolean setf,var Integer res)
begin
  return;
end;

global
function Boolean ShowInternalWebApp(Integer lasttype,record WebNGStructVc WSr,string mpath)
begin
  ShowInternalWebApp = false;
  return;
end;

global
function Boolean InternalNodeIsApplication(Integer nodetype)
begin
  InternalNodeIsApplication = false;
  return;
end;


global
function string 255 GetStandardIDSecureHash(record HWIDUserVc HWIDUserr,string type)
begin

  GetStandardIDSecureHash = "";
  return;
end;

global
procedure AddStdAccRecordsFromIBM()
begin
  return;
end;

global
procedure AddStdCRMRecordsFromIBM()
begin
  return;
end;

global
procedure SyncMarketplaceItemsWithMarketplace(var array record LocalMarketplaceItemVc items,string custcode,string product)
begin

end;

global
procedure SyncMarketplaceItemsWithMarketplace2(var array record LocalMarketplaceItemVc items,string custcode,string product,string version)
begin

end;

global
procedure SyncLocalSubscriptionsWithMarketplace(string custocde,string email,array record LocalLicenseSubVc changes,var array record LocalLicenseSubVc active)
begin

end;

global
procedure SyncNewCreditCardWithMarketplace(string custcode,string cardfirstname,string cardlastname,string country,string city,string state,string street,string postalcode,string phone,string email,Integer cardtype,string cardnumber,string CCName,string CCCVV,Integer expiryyear,Integer expirymonth,var Integer validcconmarketplace)
begin

end;


global
procedure SyncCreditCardStatusWithMarketplace(string custcode,var Integer validcconmarketplace)
begin

end;

global
procedure HTSFindMyControllerAndGetSettings3(string nonce,string custcode,string apikeyhash,string cncode,var string pollingport,var Integer pollingf,var string assignedcncode,var string ccaddr,var string pollingportlist,var string cchttpport,var string cchttpsport,var string cchansaport)
begin
  return;
end;

global
function Boolean IsNewSubscription(record SubscriptionTransVc STr)
begin
  IsNewSubscription = false;
  return;
end;

global
procedure CheckStandardIDIsValid(string stdid,var Boolean res)
begin

  return;
end;


global
procedure DoOAuthCheckIfTokenIsValid(string token,var string standardid,var Boolean res)
begin

  return;
end;

global
procedure CloudCheckOverdueInvoices(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string user,string standardid,string langcode,var Area result)
begin
  return;
end;

global
function Boolean FolderDownloadsAreBlocked(string path)
begin
  FolderDownloadsAreBlocked = false;
end;

global
updating function Boolean DoSubscriptionTransPayMn(var record RcVc RepSpec)
begin

  DoSubscriptionTransPayMn = false;
  return;
end;

global
updating procedure ShopPaymentAfterSwish(string paysessionid, string aresponse, string payeePaymentReference, string payerAlias)
begin
  return;
end;

global
updating procedure ShopPaymentSwishRedirectAfter(string paysessionid,string response)
begin
  return;
end;

global
procedure GetStdIDServerList(string email,var array string hostarr,var array Longint portarr,var array Longint httpportarr,var array Longint sslportarr,var array string namearr)
begin
  return;
end;

global
procedure InviteStandardIdToServerCloud(string serverid,string email,var Boolean retval,var LongInt errorcode,var string name)
begin
  return;
end;

global
procedure MarkTestStandardIDOnSave(var record HWIDUserVc HWIDUserr)
begin
  return;
end;

global
procedure IBMCloudStopHost(record HostingConfigurationVc HCr,record CloudNodeVc CNr,Boolean forcef,var string errmsg)
begin
  return;
end;

global
procedure AmazonStopHost(record HostingConfigurationVc HCr,record CloudNodeVc CNr,Boolean forcef)
begin
  return;
end;

global
procedure GenerateCertificates(string ipaddr,var area a_cert,var area a_privkey,var string errmsg)
begin
  return;
end;

global
updating procedure FinishBannerUpload(string sess,string filename,string id,string tag)
begin

  return;
end;

global
function Integer CurrentPartnerLocal()
begin

  return;
end;

global
procedure GetRemoteNCBanner(vector string vVals,var area html,var Longint bannerno)
begin
  return;
end;

global
procedure FindCloudServerAddrAndPort(string server_id,var string server_addr,var Longint server_port,var Integer status,var Integer new_controller)
begin
  return;
end;

global
procedure DownloadReadyFileFromServer(string serverid,string addr,string key,string filepath,string filename,string dwname,ULong64 filesz)
begin
  return;
end;

global
procedure GetStandardInstallServer(var string url,var string key)
begin
  return;
end;

global
function Boolean IsNonBranchedVersion(string vercode)
begin
  IsNonBranchedVersion = false;
  return;
end;

global
function Boolean IsDevelopmentVersion(string vercode)
begin
  IsDevelopmentVersion = false;
  return;
end;

global
function Boolean IsTestVersion(string vercode)
begin
  IsTestVersion = false;
  return;
end;

global
procedure GetOptInCustomers(string custcode,Integer regincountry,Longint contractno,var array string arrOpt,var array string arremail,var string baselink)
begin
  return;
end;

global
function string 255 CheckInternalStrings(Longint strno)
begin
  CheckInternalStrings = "";
  return;
end;

global
updating function Boolean InternalUpdatingActions(string action)
begin
  InternalUpdatingActions = false;
  return;
end;

global
updating procedure RegisterDSCustomer(string tuuid,string cucode)
begin
  return;
end;

global
function string 255 InstanceAMI(string instance_type,string region)
begin
  InstanceAMI = "";
  return;
end;

global
procedure GetEnablerFile2(string enablerfile,vector string vVals,var vector string vRes)
begin

  return;
end;

global
function string 255 InstanceAKI(string instance_type,string region)
begin
  InstanceAKI = "";
  return;
end;

global
function Boolean DoOuterWebActions(string action)
begin
  DoOuterWebActions = false;
end;

global
procedure FinishVoiceItEnrollUpload(string sess,string filename,string id,string tag)
begin
return;
end;

global
procedure FinishVoiceItIdentifyUpload(string sess,string filename,string id,string tag)
begin
return;
end;
global
procedure GetContractCompAccessList2(var array Integer comparr,var Boolean allf,string stdid,UUID server_uuid)
begin
  return;
end;

global
procedure GetContractCompAccessList(var array Integer comparr,var Boolean allf,string stdid)
begin
  return;
end;

global
procedure GetBookkeeperCompAccessList2(var array Integer comparr,var Boolean allf,string stdid,UUID server_uuid)
begin
  return;
end;

global
procedure GetBookkeeperCompAccessList(var array Integer comparr,var Boolean allf,string stdid)
begin
  return;
end;

global
procedure CloudControllerFindServer(string bundle_id,string db_version,string app_version,string app_running_build,string app_receipt_hash,string server_id,
                                    var string server_addr,var LongInt server_port,var Integer status,var Integer new_controller)
begin
end;

global
procedure FindServiceCloud(record ServiceRequestHeaderVc SRHr,string service,Boolean reportf,var record TXServiceReplyVc TXSrvReplyr,var record LookupResultVc LRr)
begin
end;

global
procedure FindServiceCloud2(record ServiceRequestHeaderVc SRHr,string service,Boolean reportf,var record TXServiceReplyVc TXSrvReplyr,var record LookupResultVc LRr)
begin
end;

global
procedure FindServiceCloud3(record ServiceRequestHeaderVc SRHr,string service,Boolean reportf,var record TXServiceReplyVc TXSrvReplyr,var record LookupResultVc LRr,Boolean vatbased)
begin
end;

global
updating procedure InitASPIdleTasks()
begin
end;

global
updating procedure StoreStdIDCustomerLink(record HWIDUserVc HWIDUserr,string custcode,Integer regincountry,string compname)
begin
end;

global
function Boolean IsCloudNode()
begin
  IsCloudNode = false;
  return;
end;

global
function Boolean IsCloudController()
begin
  IsCloudController = false;
  return;
end;

global
procedure GetTextBackupListForCustomerSystem(vector string args,date start_dt,date end_dt,var array string tb_arr)
begin
end;

global
procedure GetTextBackupLinkForCustomerSystem(vector string args,Boolean sslf,var string downloadurl)
begin
end;

global
procedure UpdateToVersion(record HansaVersionVc HVr)
begin
end;

global
procedure UpdateWantedStatusOnServers(array uuid csarr,Integer wanted_status)
begin
end;

global
function string 255 StateName(LongInt state)
begin
end;

global
updating procedure StartPendingVersionDownloads()
begin
end;
