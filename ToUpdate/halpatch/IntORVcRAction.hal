//external function LongInt ReadLocation(string,var record LocationVc);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert(Integer,Integer,string,string,string,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Boolean AcceptanceRulesExists(Integer,string);
external function val GetIntORRowReserv(LongInt,string,string,var val,var string,var string,var string,Boolean);
//external updating procedure UpdateAcceptRec(LongInt,string,Integer);
external function Date ConvertPlanShipString(string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
//external updating procedure GenerateAcceptRec(string,LongInt,string,string,val);
external procedure SetIntORFlags(record IntORVc);
external function Boolean SerNrTestIntORVc(LongInt,Date,var Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetCurUser(var record UserVc);
external updating function Boolean DoReleaseIntORRsrvAll(record IntORVc,Integer);
external function Boolean MySendAsyncWebRequest(string,longint,boolean,string,string,string,string,area,string,integer);
external function boolean MySendWebRequest(string,integer,longint,boolean,string,string,string,string,boolean,area,var area,integer);
external procedure addParamToJSONArea(string, string, var area);
external procedure delLastComaInArea(var area);
external function string 255 NormalizeStrToJson(string);
external function boolean MySendRawWebRequest(string,longint,boolean,string,string,string,string,boolean,area,var area,integer);
external updating procedure EasySendTurboSMS(string, string);

SetLangMode(LangRussian,"RUS",0);

global function boolean RemoteSendConfirmSMSOld(record SVOVc SVOr, string code)
begin
  boolean res;
  string 255 key,secret,host,keyNode,signatureNode,extNumNode,phoneNode,page;
	Area req,reply,atmp;
	record BinotelSettingsBlock BSb;
	string 255 LogPass,EncodedLogPass,tstr,c;
	row IntORVc IntORrw;
	integer rwcnt;
	json jreply;
	longint ii,alen,i;
	boolean nextdata,resok;
	
	LogPass = "hansa-server" & ":" & "7s44wkjm7U8374N7o1mkJN2vM";
  EncodedLogPass = "Authorization: Basic " & Base64Encode(LogPass);
  
  addtexttoarea(EncodedLogPass & chr(13) & chr(10),req);
  AddTextToArea("" & chr(13) & chr(10),req);
  
  host = "api.a-service.ua";
  page = "/partsearch/request.php";
  
  AddTextToArea("{",req);
    addParamToJSONArea("Status",NormalizeStrToJson("997"),req);
    addParamToJSONArea("Date",NormalizeStrToJson(CurrentDate),req);
    addParamToJSONArea("Time",NormalizeStrToJson(CurrentTime),req);
    addParamToJSONArea("User",NormalizeStrToJson(CurrentUser),req);
    addParamToJSONArea("OrderNumber",NormalizeStrToJson(SVOr.SerNr),req);
    addParamToJSONArea("ConfirmCode",NormalizeStrToJson(code),req);
    addParamToJSONArea("Phone1",NormalizeStrToJson(SVOr.Kontinfo1),req);
	  addParamToJSONArea("Phone2",NormalizeStrToJson(SVOr.Phone2),req);
    delLastComaInArea(req);
  AddTextToArea("}",req);
  AddTextToArea("" & chr(13) & chr(10),req);
  
  logtext(0,1111111);
  
  if(MySendRawWebRequest("api.a-service.ua","443",true,"POST","/bot/sender.php","application/json","",false,req,reply,5))then begin
    writeareatofile(reply,"SendSVOrConfirmCodeReply.txt",1);
    logtext(0,"getarealength(reply) " & getarealength(reply));
    setareazerosize(atmp);
		alen = getarealength(reply);
		for(i=0;i<alen;i=i+1)begin
			c = getstringfromarea(reply,i,1);
			if(c=="{")then begin
				getareafromarea(reply,i,getarealength(reply)-i,atmp);
				setareazerosize(reply);
				getareafromarea(atmp,0,getarealength(atmp),reply)
				i = alen;
			end;
		end;
    //{"result":"ok"}   die("{\"result\":\"ok\"}");
    jreply = ParseJSONArea(reply);
    if(JSONGet(jreply,"result")=="ok" or currentuser=="SA")then begin
      res = true;
    end else begin
      res = false;
    end;
    
  end;
  
  WriteAreaToFile(req,"SendSVOrConfirmCode.txt",0);
  
  RemoteSendConfirmSMSOld = res;
return;
end;


global function boolean RemoteSendConfirmSMS(record SVOVc SVOr, string code)
begin
  string 20 phone;
	  
  phone = SVOr.Kontinfo1;
  if(blank(phone))then begin
    phone = SVOr.Phone2;
  end;
	qupdating.EasySendTurboSMS(phone,"Код для отримання обладнання: " & code);  
    
  RemoteSendConfirmSMS = true;
return;
end;

global procedure SendIntOR(var record IntORVc IntORr)
begin
	string 255 key,secret,host,keyNode,signatureNode,extNumNode,phoneNode,page;
	Area req,reply;
	record BinotelSettingsBlock BSb;
	string 255 LogPass,EncodedLogPass,tstr;
	row IntORVc IntORrw;
	integer i,rwcnt;
	json jreply;
	longint ii;
	boolean nextdata,resok;
	
	
				LogPass = "hansa-server" & ":" & "7s44wkjm7U8374N7o1mkJN2vM";
				EncodedLogPass = "Authorization: Basic " & Base64Encode(LogPass);
				
				
				addtexttoarea(EncodedLogPass & chr(13) & chr(10),req);
				AddTextToArea("" & chr(13) & chr(10),req);
				
				host = "api.a-service.ua";
				page = "/partsearch/request.php";
			
			
				AddTextToArea("{",req);
					if(IntORr.DoneFlag==0)then begin
						addParamToJSONArea("Type",NormalizeStrToJson("New"),req);
					end else begin
						addParamToJSONArea("Type",NormalizeStrToJson("Closed"),req);
					end;
					addParamToJSONArea("OrderNo",NormalizeStrToJson(IntORr.SerNr),req);
					addParamToJSONArea("User",NormalizeStrToJson(IntORr.OurUser),req);
					addParamToJSONArea("Name",NormalizeStrToJson(IntORr.Name),req);
					addParamToJSONArea("SalesGroup",NormalizeStrToJson(IntORr.SalesGroup),req);
					addParamToJSONArea("DoneFlag",NormalizeStrToJson(IntORr.DoneFlag),req);
					addParamToJSONArea("OnlyOfficial",NormalizeStrToJson(IntORr.OnlyOfficial),req);
					addParamToJSONArea("OnlyAlternative",NormalizeStrToJson(IntORr.OnlyOfficial),req);
					
					addParamToJSONArea("SVOItem",NormalizeStrToJson(IntORr.SVOItem),req);
					addParamToJSONArea("SVOSerial",NormalizeStrToJson(IntORr.SVOSerial),req);
					addParamToJSONArea("SVOSpec",NormalizeStrToJson(IntORr.SVOSpec),req);
					
					addParamToJSONArea("ServiceOrderNo",NormalizeStrToJson(IntORr.SVONr),req);
					addParamToJSONArea("SVOContactMail",NormalizeStrToJson(IntORr.SVOContactMail),req);
					addParamToJSONArea("SVOContactName",NormalizeStrToJson(IntORr.SVOContactName),req);
					addParamToJSONArea("SVOContactPhone2",NormalizeStrToJson(IntORr.SVOContactPhone2),req);
					addParamToJSONArea("SVOContactPhone1",NormalizeStrToJson(IntORr.SVOContactPhone1),req);
					
					AddTextToArea("\"Items\" : [",req);
					rwcnt = matrowcnt(IntORr);
					for(i=0;i<rwcnt;i=i+1)begin
						matrowget(IntORr,i,IntORrw);
						if(nonblank(IntORrw.ArtCode))then begin
							AddTextToArea("{",req);
								addParamToJSONArea("ArtCode",NormalizeStrToJson(IntORrw.ArtCode),req);
								addParamToJSONArea("Quant",NormalizeStrToJson(IntORrw.Quant),req);
								addParamToJSONArea("Spec",NormalizeStrToJson(IntORrw.Spec),req);
								addParamToJSONArea("Comment",NormalizeStrToJson(IntORrw.Comment),req);
								delLastComaInArea(req);
							AddTextToArea("},",req);
						end;
					end;
					delLastComaInArea(req);
					AddTextToArea("]",req);
					delLastComaInArea(req);
				AddTextToArea("}",req);
				
				AddTextToArea("" & chr(13) & chr(10),req);
				
				WriteAreaToFile(req,"SendIntOR.txt",0);
				//MySendRawWebRequest(host,443,-1,true,"POST",page,"application/json","",false,req,reply,10);
				MySendRawWebRequest(host,"443",true,"POST",page,"application/json","",false,req,reply,5);

				WriteAreaToFile(reply,"SendIntORReply.txt",0);
				if(getarealength(reply)>10 and countlinesinarea(reply)>1)then begin
					for(ii=0;ii<countlinesinarea(reply);ii=ii+1)begin
						tstr = trim(getlinefromarea(reply,ii));
						if(blank(tstr))then begin
							nextdata = true;						
						end;
						if(nextdata)then begin
							if(tstr=="ok")then begin
								resok = true;
							end;
						end;
					end;
					if(resok==false)then begin	
						IntORr.SendFlag = 0;
					end;
				end else begin
					IntORr.SendFlag = 0;
				end;
				
return;
end;

global// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 22 03 2021 y. at 8:53:21 PM
function LongInt IntORVcRecordInIndex(record IntORVc IntORr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (IntORr.DoneFlag!=0) then begin 
    if (indexname=="ActSerNr")  then begin res = 0; end;
    if (indexname=="ActSVONr")  then begin res = 0; end;
    if (indexname=="ActStatus")  then begin res = 0; end;
    if (indexname=="ActStatusText")  then begin res = 0; end;
  end;
  
  IntORVcRecordInIndex = res;
  return;
end;

global
function LongInt IntORVcRecordDefaults(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt long3,LongInt long4)
begin
  record DepVc Depr;
  record UserVc USr;
  LongInt res;

  IntORr.SerNr = -1;
  IntORr.TransDate = CurrentDate;
  IntORr.StatusFlag = 0;
  GetCurUser(USr);
  IntORr.OurUser = USr.Code;
  IntORr.Name = USr.Name;
  IntORr.Department = USr.Department;
  IntORr.Location = USr.Location;
  IntORr.Phone = USr.Phone1;
  IntORr.Fax = USr.Fax1;
  IntORr.emailAddr = USr.emailAddr;
  Depr.Code = IntORr.Department;
  if (ReadFirstMain(Depr,1,true)) then begin
    IntORr.ShipAddr0 = Depr.Addr0;
    IntORr.ShipAddr1 = Depr.Addr1;
    IntORr.ShipAddr2 = Depr.Addr2;
    IntORr.ShipAddr3 = Depr.Addr3;
    IntORr.DelAddr3 = Depr.Addr4;
    IntORr.DelAddr4 = Depr.Addr5;
  end;
  if (SingleUserMode) then begin
    IntORr.SerNr = NextSerNr("IntORVc",IntORr.TransDate,-1,false,"");
  end;
  
  IntORr.SalesMan = USr.Code;
  IntORr.SalesGroup = USr.SalesGroup;
  
  IntORVcRecordDefaults = res;  
  RETURN;
END;

global
function LongInt IntORVcRecordDuplicate(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  row IntORVc IntORrw;
  Integer rwcnt,i;
  
  IntORr.SerNr= -1;  
  IntORr.StatusFlag = 0;
  IntORr.Closed = 0;
  IntORr.TransDate = CurrentDate;
  IntORr.OKPersons = "";
  rwcnt = MatRowCnt(IntORr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IntORr,i,IntORrw);
    IntORrw.Shipd1 = BlankVal;
    IntORrw.Shipd2 = BlankVal;
    IntORrw.Sent = BlankVal;
    IntORrw.POOrd = BlankVal;
    MatRowPut(IntORr,i,IntORrw);
  end;
  if (SingleUserMode) then begin
    IntORr.SerNr = NextSerNr("IntORVc",IntORr.TransDate,-1,false,"");
  end;
  IntORr.AcceptanceBy = "";
  IntORr.AcceptanceFYI = "";
  SetIntORFlags(IntORr);
  IntORVcRecordDuplicate = res;  
  RETURN;
END;

global
updating function LongInt IntORVcRecordSave(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetIntORFlags(IntORr);
  if(IntORr.SendFlag==1 or IntORr.DoneFlag)then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 25 03 2021 y. at 4:49:49 PM
		SendIntOR(IntORr);
  end;
  IntORVcRecordSave = res; 
  RETURN;
END;

global
updating function LongInt IntORVcRecordSaveAfter(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
//  SetIntORAcceptState(IntORr,0);
  IntORVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt IntORVcRecordUpdate(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetIntORFlags(IntORr);
  if(IntORr.SendFlag==1 and IntOR2r.SendFlag==0)then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 25 03 2021 y. at 4:49:47 PM
		SendIntOR(IntORr);
  end;
  if(IntORr.DoneFlag==1 and IntOR2r.DoneFlag==0)then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 25 03 2021 y. at 4:49:47 PM
		SendIntOR(IntORr);
  end;
  IntORVcRecordUpdate = res; 
  RETURN;
END;

global
updating function LongInt IntORVcRecordUpdateAfter(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if (IntORr.Closed!=0) then begin
    DoReleaseIntORRsrvAll(IntORr,-1);
  end;
  IntORVcRecordUpdateAfter = res;
  RETURN;
END;

procedure IntORVcConvertB1ToB2Date(record IntORVc IntORp)
BEGIN
  row IntORVc IntORrw;
  Integer i,rwcnt;
  string 20 curncy;
  val fr,to1,to2,br1,br2,t;

  curncy = "";
  GetFullCurncyRate(curncy,IntORp.TransDate,fr,to1,to2,br1,br2);
  rwcnt = MatRowCnt(IntORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntORp,i,IntORrw);
    B1ToB2Val(IntORrw.Price,br1,br2,t);
    IntORrw.Price = t;
    B1ToB2Val(IntORrw.Sum,br1,br2,t);
    IntORrw.Sum = t;
    MatRowPut(IntORp,i,IntORrw);
  end;
  RETURN;
END;
 
global
function LongInt IntORVcRecordImport(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    IntORVcConvertB1ToB2Date(IntORr);
  end;
  if (blankdate(IntORr.PlanShipDate)) then begin
    IntORr.PlanShipDate = ConvertPlanShipString(IntORr.PlanShip);
  end;    
  IntORVcRecordImport = res;
  RETURN;
END;


function LongInt IntORRemoveTest(record IntORVc IntORp,LongInt errmf)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;
  
  res = 1;
  BlockLoad(DBLockRec);
  if (IntORp.TransDate>DBLockRec.DeleteBeforeDate) then begin
    if (IntORp.StatusFlag>0) then begin
      if (errmf!=0) then begin MessageBox(1544,""); end;
      res = 0;
      goto LIntORRemoveTest;
    end;
  end;
  if (IntORp.StatusFlag>0) then begin
    if (errmf!=0) then begin MessageBox(1560,""); end;
    res = 0;
    goto LIntORRemoveTest;
  end;
  
  if (IntORp.SendFlag>0) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 25 03 2021 y. at 5:23:08 PM
    if (errmf!=0) then begin MessageBox(1560,""); end;
    res = 0;
    goto LIntORRemoveTest;
  end;
  
  
LIntORRemoveTest:;
	
	if(currentuser=="SA")then begin
		res = 1;
	end;
	
  IntORRemoveTest = res;
  RETURN;
END;

global
function LongInt IntORVcRecordRemoveTest(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record IntORVc locIntORr;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;

  locIntORr.SerNr = IntORr.SerNr;
  if (ReadFirstMain(locIntORr,1,true)) then begin
    res = IntORRemoveTest(locIntORr,long3);
  end else begin
    res = IntORRemoveTest(IntORr,long3);
  end;
  actnr = 1;
  while (ReadRecordLink(IntORr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (long3>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LIntORVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;
LIntORVcRecordRemoveTest:;
  IntORVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt IntORVcRecordCheck(record IntORVc IntORr,record IntORVc IntOR2r,LongInt stat,LongInt check)
BEGIN
  LongInt res,err;
  Integer insertmode,updatemode;
  record IntORVc lIntORr;
  record LocationVc Locr;
  Boolean gentrans;
  Integer i,rwcnt;
  record INVc INr;
  row IntORVc IntORrw;
  row IntORVc IntOR2rw;
  string 5 itgroup,itgroup2,tstr,comment;
  record IntORClassVc IntORClassr;
  record IntORSettingBlock IntORRec;
  val rsrvd,ordqty;
  
  BlockLoad(IntORRec);
  res = 0;
  insertmode = 1;
  updatemode = 2;
  
  if(blank(IntORr.SVOItem))then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 22 03 2021 y. at 9:19:47 PM
  	RecordCheckError(1058,"",-1,"SVOItem");      
    res = -1; 
    goto LIntORVcRecordCheck;
  end;
  if(blank(IntORr.SVOSerial))then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 22 03 2021 y. at 9:19:47 PM
  	RecordCheckError(1058,"",-1,"SVOSerial");      
    res = -1; 
    goto LIntORVcRecordCheck;
  end;
  if (IntORr.SerNr<=0) then begin
    IntORr.SerNr = NextSerNr("IntORVc",IntORr.TransDate,-1,false,"");
  end;
  /*
  
  if ((stat==insertmode) or (IntORr.SerNr!=IntOR2r.SerNr)) then begin
    lIntORr.SerNr = IntORr.SerNr;
    if (ReadFirstMain(lIntORr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LIntORVcRecordCheck;
    end;
    if (SerNrTestIntORVc(IntORr.SerNr,IntORr.TransDate,gentrans)==false) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
      res = -1;
      goto LIntORVcRecordCheck;
    end;
  end;  
  if (blank(IntORr.Location)) then begin
    RecordCheckError(1058,"",-1,"Location");      
    res = -1; 
    goto LIntORVcRecordCheck;
  end;
  if ((IntORRec.ReqIntORClass==1) and blank(IntORr.IntORClass)) then begin
    RecordCheckError(20089,"",-1,"IntORClass");      
    res = -1; 
    goto LIntORVcRecordCheck;
  end;*/
  /*err = ReadLocation(IntORr.Location,Locr);
  if (err!=0) then begin
    RecordCheckError(err,IntORr.Location,-1,"Location");
    res = -1;
    goto LIntORVcRecordCheck;
  end;*/
  /*
  if (nonblank(IntORr.FrLocation)) then begin
    Locr.Code = IntORr.FrLocation;
    if (ReadFirstMain(Locr,1,true)==false) then begin
      RecordCheckError(1120,IntORr.FrLocation,-1,"FrLocation");
      res = -1;
      goto LIntORVcRecordCheck;
    end;
    
    if (IntORr.FrLocation==IntORr.Location) then begin
      if (Locr.RequirePos==0) then begin
        RecordCheckError(1769,"",-1,"Location");
        res = -1;
        goto LIntORVcRecordCheck;
      end;
    end;
  end;*/
  /*
  if ((stat==insertmode) or (IntORr.IntORClass!=IntOR2r.IntORClass)) then begin
    if (nonblank(IntORr.IntORClass)) then begin
      IntORClassr.Code = IntORr.IntORClass;
      if (ReadFirstMain(IntORClassr,1,true)==false) then begin
        RecordCheckError(20090,IntORr.IntORClass,-1,"IntORClass");      
        res = -1; 
        goto LIntORVcRecordCheck;
      end;
    end;
  end; 
  rwcnt = MatRowCnt(IntORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntORr,i,IntORrw);
    if (nonblank(IntORrw.ArtCode)) then begin
      if (ReadFirstItem(IntORrw.ArtCode,INr,true,false)==false) then begin
        RecordCheckError(1120,IntORrw.ArtCode,i,"ArtCode");      
        res = -1; 
        goto LIntORVcRecordCheck;
      end;
      if (INr.Terminated!=0) then begin
        RecordCheckError(1266,IntORrw.ArtCode,i,"ArtCode");      
        res = -1; 
        goto LIntORVcRecordCheck;
      end;
      if (INr.ItemType==2) then begin
        RecordCheckError(1826,IntORrw.ArtCode,i,"ArtCode");      
        res = -1; 
        goto LIntORVcRecordCheck;
      end;
      if (IntORrw.Quant<IntORrw.Shipd1) then begin
        RecordCheckError(22076,"",i,"Quant"); 
        res = -1; 
        goto LIntORVcRecordCheck;
      end;
    end;

    if (i<MatRowCnt(IntOR2r)) then begin
      MatRowGet(IntOR2r,i,IntOR2rw);
      rsrvd = GetIntORRowReserv(IntORr.SerNr,IntOR2rw.ArtCode,IntOR2rw.SerialNr,ordqty,comment,tstr,tstr,true);
      if (IntOR2rw.ArtCode!=IntORrw.ArtCode) then begin
        if (rsrvd>0) then begin
          RecordCheckError(20564,"",i,"ArtCode"); 
          res = -1; 
          goto LIntORVcRecordCheck;
        end;
      end;
      if (rsrvd>IntORrw.Quant-IntORrw.Shipd1) then begin
        RecordCheckError(22067,"",i,"ArtCode"); 
        res = -1; 
        goto LIntORVcRecordCheck;
      end;
    end;
        
  end;
  */
  //need more
LIntORVcRecordCheck:;  
  IntORVcRecordCheck = res; 
  RETURN;
END;

global
updating function LongInt IntORVcRecordRemove(var record IntORVc IntORr,record IntORVc IntOR2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  DoReleaseIntORRsrvAll(IntORr,-1);
  IntORVcRecordRemove = res; 
  return;
end;

global updating function boolean RA_CreateIntORfromSVOD(record SVOVc SVOr,var record IntORVc IntORr)
begin
	row SVOVc SVOrw;
	integer wn;
	record UserVc USr;
	record MainStockBlock MSb;
	boolean res;
	
	matrowget(SVOr,0,SVOrw);
	USr.Code = currentuser;
	readfirstmain(USr,1,true);
	IntORr.Location = USr.Location;
	if(blank(IntORr.Location))then begin
		blockload(MSb);
		IntORr.Location = MSb.MainStock;
	end;
	IntORr.SVONr = SVOr.SerNr;
	IntORr.SalesMan = CurrentUser;
	IntORr.SalesGroup = SVOr.SalesGroup;
	IntORr.SVOItem = SVOrw.ArtCode;
	IntORr.SVOSerial = SVOrw.SerialNr;
	IntORr.SVOSpec = SVOrw.Spec;
	IntORr.SVOContactName = trim(SVOr.Priynato & " " & SVOr.Name & " " & SVOr.MiddleName);
	IntORr.SVOContactPhone1 = SVOr.Kontinfo1;
	IntORr.SVOContactPhone2 = SVOr.Phone2;
	IntORr.SVOContactMail = SVOr.Kontinfo2;
	IntORr.SerNr = NextSerNr("IntORVc",IntORr.TransDate,-1,false,"");
	if(recordinsert(IntORr,true))then begin
		CreateRecordLink(IntORr,currentcompany,SVOr,currentcompany);
		CreateRecordLink(SVOr,currentcompany,IntORr,currentcompany);
		res = true;
	end;

	RA_CreateIntORfromSVOD = res;
return;
end;